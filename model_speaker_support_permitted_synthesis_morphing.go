/*
VOICEVOX Engine

VOICEVOXの音声合成エンジンです。

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voicevox

import (
	"encoding/json"
	"fmt"
)

// SpeakerSupportPermittedSynthesisMorphing An enumeration.
type SpeakerSupportPermittedSynthesisMorphing string

// List of SpeakerSupportPermittedSynthesisMorphing
const (
	SPEAKERSUPPORTPERMITTEDSYNTHESISMORPHING_ALL       SpeakerSupportPermittedSynthesisMorphing = "ALL"
	SPEAKERSUPPORTPERMITTEDSYNTHESISMORPHING_SELF_ONLY SpeakerSupportPermittedSynthesisMorphing = "SELF_ONLY"
	SPEAKERSUPPORTPERMITTEDSYNTHESISMORPHING_NOTHING   SpeakerSupportPermittedSynthesisMorphing = "NOTHING"
)

// All allowed values of SpeakerSupportPermittedSynthesisMorphing enum
var AllowedSpeakerSupportPermittedSynthesisMorphingEnumValues = []SpeakerSupportPermittedSynthesisMorphing{
	"ALL",
	"SELF_ONLY",
	"NOTHING",
}

func (v *SpeakerSupportPermittedSynthesisMorphing) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpeakerSupportPermittedSynthesisMorphing(value)
	for _, existing := range AllowedSpeakerSupportPermittedSynthesisMorphingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpeakerSupportPermittedSynthesisMorphing", value)
}

// NewSpeakerSupportPermittedSynthesisMorphingFromValue returns a pointer to a valid SpeakerSupportPermittedSynthesisMorphing
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpeakerSupportPermittedSynthesisMorphingFromValue(v string) (*SpeakerSupportPermittedSynthesisMorphing, error) {
	ev := SpeakerSupportPermittedSynthesisMorphing(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpeakerSupportPermittedSynthesisMorphing: valid values are %v", v, AllowedSpeakerSupportPermittedSynthesisMorphingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpeakerSupportPermittedSynthesisMorphing) IsValid() bool {
	for _, existing := range AllowedSpeakerSupportPermittedSynthesisMorphingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpeakerSupportPermittedSynthesisMorphing value
func (v SpeakerSupportPermittedSynthesisMorphing) Ptr() *SpeakerSupportPermittedSynthesisMorphing {
	return &v
}

type NullableSpeakerSupportPermittedSynthesisMorphing struct {
	value *SpeakerSupportPermittedSynthesisMorphing
	isSet bool
}

func (v NullableSpeakerSupportPermittedSynthesisMorphing) Get() *SpeakerSupportPermittedSynthesisMorphing {
	return v.value
}

func (v *NullableSpeakerSupportPermittedSynthesisMorphing) Set(val *SpeakerSupportPermittedSynthesisMorphing) {
	v.value = val
	v.isSet = true
}

func (v NullableSpeakerSupportPermittedSynthesisMorphing) IsSet() bool {
	return v.isSet
}

func (v *NullableSpeakerSupportPermittedSynthesisMorphing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpeakerSupportPermittedSynthesisMorphing(val *SpeakerSupportPermittedSynthesisMorphing) *NullableSpeakerSupportPermittedSynthesisMorphing {
	return &NullableSpeakerSupportPermittedSynthesisMorphing{value: val, isSet: true}
}

func (v NullableSpeakerSupportPermittedSynthesisMorphing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpeakerSupportPermittedSynthesisMorphing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
