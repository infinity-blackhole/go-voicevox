/*
VOICEVOX Engine

VOICEVOXの音声合成エンジンです。

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voicevox

import (
	"encoding/json"
)

// checks if the SpeakerStyle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpeakerStyle{}

// SpeakerStyle スピーカーのスタイル情報
type SpeakerStyle struct {
	Name string `json:"name"`
	Id   int32  `json:"id"`
}

// NewSpeakerStyle instantiates a new SpeakerStyle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpeakerStyle(name string, id int32) *SpeakerStyle {
	this := SpeakerStyle{}
	this.Name = name
	this.Id = id
	return &this
}

// NewSpeakerStyleWithDefaults instantiates a new SpeakerStyle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpeakerStyleWithDefaults() *SpeakerStyle {
	this := SpeakerStyle{}
	return &this
}

// GetName returns the Name field value
func (o *SpeakerStyle) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpeakerStyle) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpeakerStyle) SetName(v string) {
	o.Name = v
}

// GetId returns the Id field value
func (o *SpeakerStyle) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SpeakerStyle) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SpeakerStyle) SetId(v int32) {
	o.Id = v
}

func (o SpeakerStyle) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpeakerStyle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

type NullableSpeakerStyle struct {
	value *SpeakerStyle
	isSet bool
}

func (v NullableSpeakerStyle) Get() *SpeakerStyle {
	return v.value
}

func (v *NullableSpeakerStyle) Set(val *SpeakerStyle) {
	v.value = val
	v.isSet = true
}

func (v NullableSpeakerStyle) IsSet() bool {
	return v.isSet
}

func (v *NullableSpeakerStyle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpeakerStyle(val *SpeakerStyle) *NullableSpeakerStyle {
	return &NullableSpeakerStyle{value: val, isSet: true}
}

func (v NullableSpeakerStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpeakerStyle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
