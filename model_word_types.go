/*
VOICEVOX Engine

VOICEVOXの音声合成エンジンです。

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voicevox

import (
	"encoding/json"
	"fmt"
)

// WordTypes      fastapiでword_type引数を検証する時に使用するクラス
type WordTypes string

// List of WordTypes
const (
	PROPER_NOUN WordTypes = "PROPER_NOUN"
	COMMON_NOUN WordTypes = "COMMON_NOUN"
	VERB        WordTypes = "VERB"
	ADJECTIVE   WordTypes = "ADJECTIVE"
	SUFFIX      WordTypes = "SUFFIX"
)

// All allowed values of WordTypes enum
var AllowedWordTypesEnumValues = []WordTypes{
	"PROPER_NOUN",
	"COMMON_NOUN",
	"VERB",
	"ADJECTIVE",
	"SUFFIX",
}

func (v *WordTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WordTypes(value)
	for _, existing := range AllowedWordTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WordTypes", value)
}

// NewWordTypesFromValue returns a pointer to a valid WordTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWordTypesFromValue(v string) (*WordTypes, error) {
	ev := WordTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WordTypes: valid values are %v", v, AllowedWordTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WordTypes) IsValid() bool {
	for _, existing := range AllowedWordTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WordTypes value
func (v WordTypes) Ptr() *WordTypes {
	return &v
}

type NullableWordTypes struct {
	value *WordTypes
	isSet bool
}

func (v NullableWordTypes) Get() *WordTypes {
	return v.value
}

func (v *NullableWordTypes) Set(val *WordTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableWordTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableWordTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWordTypes(val *WordTypes) *NullableWordTypes {
	return &NullableWordTypes{value: val, isSet: true}
}

func (v NullableWordTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWordTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
