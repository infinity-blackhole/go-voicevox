/*
VOICEVOX Engine

VOICEVOXの音声合成エンジンです。

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voicevox

import (
	"encoding/json"
)

// checks if the LicenseInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseInfo{}

// LicenseInfo 依存ライブラリのライセンス情報
type LicenseInfo struct {
	Name    string  `json:"name"`
	Version *string `json:"version,omitempty"`
	License *string `json:"license,omitempty"`
	Text    string  `json:"text"`
}

// NewLicenseInfo instantiates a new LicenseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseInfo(name string, text string) *LicenseInfo {
	this := LicenseInfo{}
	this.Name = name
	this.Text = text
	return &this
}

// NewLicenseInfoWithDefaults instantiates a new LicenseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseInfoWithDefaults() *LicenseInfo {
	this := LicenseInfo{}
	return &this
}

// GetName returns the Name field value
func (o *LicenseInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LicenseInfo) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *LicenseInfo) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *LicenseInfo) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *LicenseInfo) SetVersion(v string) {
	o.Version = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *LicenseInfo) GetLicense() string {
	if o == nil || IsNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *LicenseInfo) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *LicenseInfo) SetLicense(v string) {
	o.License = &v
}

// GetText returns the Text field value
func (o *LicenseInfo) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *LicenseInfo) SetText(v string) {
	o.Text = v
}

func (o LicenseInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

type NullableLicenseInfo struct {
	value *LicenseInfo
	isSet bool
}

func (v NullableLicenseInfo) Get() *LicenseInfo {
	return v.value
}

func (v *NullableLicenseInfo) Set(val *LicenseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseInfo(val *LicenseInfo) *NullableLicenseInfo {
	return &NullableLicenseInfo{value: val, isSet: true}
}

func (v NullableLicenseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
