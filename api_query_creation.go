/*
VOICEVOX Engine

VOICEVOXの音声合成エンジンです。

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voicevox

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type QueryCreationApi interface {

	/*
		AudioQueryAudioQueryPost 音声合成用のクエリを作成する

		クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return QueryCreationApiAudioQueryAudioQueryPostRequest
	*/
	AudioQueryAudioQueryPost(ctx context.Context) QueryCreationApiAudioQueryAudioQueryPostRequest

	// AudioQueryAudioQueryPostExecute executes the request
	//  @return AudioQuery
	AudioQueryAudioQueryPostExecute(r QueryCreationApiAudioQueryAudioQueryPostRequest) (*AudioQuery, *http.Response, error)

	/*
		AudioQueryFromPresetAudioQueryFromPresetPost 音声合成用のクエリをプリセットを用いて作成する

		クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest
	*/
	AudioQueryFromPresetAudioQueryFromPresetPost(ctx context.Context) QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest

	// AudioQueryFromPresetAudioQueryFromPresetPostExecute executes the request
	//  @return AudioQuery
	AudioQueryFromPresetAudioQueryFromPresetPostExecute(r QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest) (*AudioQuery, *http.Response, error)
}

// QueryCreationApiService QueryCreationApi service
type QueryCreationApiService service

type QueryCreationApiAudioQueryAudioQueryPostRequest struct {
	ctx         context.Context
	ApiService  QueryCreationApi
	text        *string
	speaker     *int32
	coreVersion *string
}

func (r QueryCreationApiAudioQueryAudioQueryPostRequest) Text(text string) QueryCreationApiAudioQueryAudioQueryPostRequest {
	r.text = &text
	return r
}

func (r QueryCreationApiAudioQueryAudioQueryPostRequest) Speaker(speaker int32) QueryCreationApiAudioQueryAudioQueryPostRequest {
	r.speaker = &speaker
	return r
}

func (r QueryCreationApiAudioQueryAudioQueryPostRequest) CoreVersion(coreVersion string) QueryCreationApiAudioQueryAudioQueryPostRequest {
	r.coreVersion = &coreVersion
	return r
}

func (r QueryCreationApiAudioQueryAudioQueryPostRequest) Execute() (*AudioQuery, *http.Response, error) {
	return r.ApiService.AudioQueryAudioQueryPostExecute(r)
}

/*
AudioQueryAudioQueryPost 音声合成用のクエリを作成する

クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return QueryCreationApiAudioQueryAudioQueryPostRequest
*/
func (a *QueryCreationApiService) AudioQueryAudioQueryPost(ctx context.Context) QueryCreationApiAudioQueryAudioQueryPostRequest {
	return QueryCreationApiAudioQueryAudioQueryPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AudioQuery
func (a *QueryCreationApiService) AudioQueryAudioQueryPostExecute(r QueryCreationApiAudioQueryAudioQueryPostRequest) (*AudioQuery, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AudioQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueryCreationApiService.AudioQueryAudioQueryPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audio_query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.text == nil {
		return localVarReturnValue, nil, reportError("text is required and must be specified")
	}
	if r.speaker == nil {
		return localVarReturnValue, nil, reportError("speaker is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "speaker", r.speaker, "")
	if r.coreVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "core_version", r.coreVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest struct {
	ctx         context.Context
	ApiService  QueryCreationApi
	text        *string
	presetId    *int32
	coreVersion *string
}

func (r QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest) Text(text string) QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest {
	r.text = &text
	return r
}

func (r QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest) PresetId(presetId int32) QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest {
	r.presetId = &presetId
	return r
}

func (r QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest) CoreVersion(coreVersion string) QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest {
	r.coreVersion = &coreVersion
	return r
}

func (r QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest) Execute() (*AudioQuery, *http.Response, error) {
	return r.ApiService.AudioQueryFromPresetAudioQueryFromPresetPostExecute(r)
}

/*
AudioQueryFromPresetAudioQueryFromPresetPost 音声合成用のクエリをプリセットを用いて作成する

クエリの初期値を得ます。ここで得られたクエリはそのまま音声合成に利用できます。各値の意味は`Schemas`を参照してください。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest
*/
func (a *QueryCreationApiService) AudioQueryFromPresetAudioQueryFromPresetPost(ctx context.Context) QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest {
	return QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AudioQuery
func (a *QueryCreationApiService) AudioQueryFromPresetAudioQueryFromPresetPostExecute(r QueryCreationApiAudioQueryFromPresetAudioQueryFromPresetPostRequest) (*AudioQuery, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AudioQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QueryCreationApiService.AudioQueryFromPresetAudioQueryFromPresetPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audio_query_from_preset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.text == nil {
		return localVarReturnValue, nil, reportError("text is required and must be specified")
	}
	if r.presetId == nil {
		return localVarReturnValue, nil, reportError("presetId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "text", r.text, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "preset_id", r.presetId, "")
	if r.coreVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "core_version", r.coreVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
