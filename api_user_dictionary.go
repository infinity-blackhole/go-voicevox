/*
VOICEVOX Engine

VOICEVOXの音声合成エンジンです。

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voicevox

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type UserDictionaryApi interface {

	/*
			AddUserDictWordUserDictWordPost Add User Dict Word

			ユーザー辞書に言葉を追加します。

		Parameters
		----------
		surface : str
		    言葉の表層形
		pronunciation: str
		    言葉の発音（カタカナ）
		accent_type: int
		    アクセント型（音が下がる場所を指す）
		word_type: WordTypes, optional
		    PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか
		priority: int, optional
		    単語の優先度（0から10までの整数）
		    数字が大きいほど優先度が高くなる
		    1から9までの値を指定することを推奨

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return UserDictionaryApiAddUserDictWordUserDictWordPostRequest
	*/
	AddUserDictWordUserDictWordPost(ctx context.Context) UserDictionaryApiAddUserDictWordUserDictWordPostRequest

	// AddUserDictWordUserDictWordPostExecute executes the request
	//  @return string
	AddUserDictWordUserDictWordPostExecute(r UserDictionaryApiAddUserDictWordUserDictWordPostRequest) (string, *http.Response, error)

	/*
			DeleteUserDictWordUserDictWordWordUuidDelete Delete User Dict Word

			ユーザー辞書に登録されている言葉を削除します。

		Parameters
		----------
		word_uuid: str
		    削除する言葉のUUID

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param wordUuid
			@return UserDictionaryApiDeleteUserDictWordUserDictWordWordUuidDeleteRequest
	*/
	DeleteUserDictWordUserDictWordWordUuidDelete(ctx context.Context, wordUuid string) UserDictionaryApiDeleteUserDictWordUserDictWordWordUuidDeleteRequest

	// DeleteUserDictWordUserDictWordWordUuidDeleteExecute executes the request
	DeleteUserDictWordUserDictWordWordUuidDeleteExecute(r UserDictionaryApiDeleteUserDictWordUserDictWordWordUuidDeleteRequest) (*http.Response, error)

	/*
			GetUserDictWordsUserDictGet Get User Dict Words

			ユーザー辞書に登録されている単語の一覧を返します。
		単語の表層形(surface)は正規化済みの物を返します。

		Returns
		-------
		Dict[str, UserDictWord]
		    単語のUUIDとその詳細

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return UserDictionaryApiGetUserDictWordsUserDictGetRequest
	*/
	GetUserDictWordsUserDictGet(ctx context.Context) UserDictionaryApiGetUserDictWordsUserDictGetRequest

	// GetUserDictWordsUserDictGetExecute executes the request
	//  @return map[string]UserDictWord
	GetUserDictWordsUserDictGetExecute(r UserDictionaryApiGetUserDictWordsUserDictGetRequest) (*map[string]UserDictWord, *http.Response, error)

	/*
			ImportUserDictWordsImportUserDictPost Import User Dict Words

			他のユーザー辞書をインポートします。

		Parameters
		----------
		import_dict_data: Dict[str, UserDictWord]
		    インポートするユーザー辞書のデータ
		override: bool
		    重複したエントリがあった場合、上書きするかどうか

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return UserDictionaryApiImportUserDictWordsImportUserDictPostRequest
	*/
	ImportUserDictWordsImportUserDictPost(ctx context.Context) UserDictionaryApiImportUserDictWordsImportUserDictPostRequest

	// ImportUserDictWordsImportUserDictPostExecute executes the request
	ImportUserDictWordsImportUserDictPostExecute(r UserDictionaryApiImportUserDictWordsImportUserDictPostRequest) (*http.Response, error)

	/*
			RewriteUserDictWordUserDictWordWordUuidPut Rewrite User Dict Word

			ユーザー辞書に登録されている言葉を更新します。

		Parameters
		----------
		surface : str
		    言葉の表層形
		pronunciation: str
		    言葉の発音（カタカナ）
		accent_type: int
		    アクセント型（音が下がる場所を指す）
		word_uuid: str
		    更新する言葉のUUID
		word_type: WordTypes, optional
		    PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか
		priority: int, optional
		    単語の優先度（0から10までの整数）
		    数字が大きいほど優先度が高くなる
		    1から9までの値を指定することを推奨

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param wordUuid
			@return UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest
	*/
	RewriteUserDictWordUserDictWordWordUuidPut(ctx context.Context, wordUuid string) UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest

	// RewriteUserDictWordUserDictWordWordUuidPutExecute executes the request
	RewriteUserDictWordUserDictWordWordUuidPutExecute(r UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest) (*http.Response, error)
}

// UserDictionaryApiService UserDictionaryApi service
type UserDictionaryApiService service

type UserDictionaryApiAddUserDictWordUserDictWordPostRequest struct {
	ctx           context.Context
	ApiService    UserDictionaryApi
	surface       *string
	pronunciation *string
	accentType    *int32
	wordType      *WordTypes
	priority      *int32
}

func (r UserDictionaryApiAddUserDictWordUserDictWordPostRequest) Surface(surface string) UserDictionaryApiAddUserDictWordUserDictWordPostRequest {
	r.surface = &surface
	return r
}

func (r UserDictionaryApiAddUserDictWordUserDictWordPostRequest) Pronunciation(pronunciation string) UserDictionaryApiAddUserDictWordUserDictWordPostRequest {
	r.pronunciation = &pronunciation
	return r
}

func (r UserDictionaryApiAddUserDictWordUserDictWordPostRequest) AccentType(accentType int32) UserDictionaryApiAddUserDictWordUserDictWordPostRequest {
	r.accentType = &accentType
	return r
}

func (r UserDictionaryApiAddUserDictWordUserDictWordPostRequest) WordType(wordType WordTypes) UserDictionaryApiAddUserDictWordUserDictWordPostRequest {
	r.wordType = &wordType
	return r
}

func (r UserDictionaryApiAddUserDictWordUserDictWordPostRequest) Priority(priority int32) UserDictionaryApiAddUserDictWordUserDictWordPostRequest {
	r.priority = &priority
	return r
}

func (r UserDictionaryApiAddUserDictWordUserDictWordPostRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.AddUserDictWordUserDictWordPostExecute(r)
}

/*
AddUserDictWordUserDictWordPost Add User Dict Word

ユーザー辞書に言葉を追加します。

Parameters
----------
surface : str

	言葉の表層形

pronunciation: str

	言葉の発音（カタカナ）

accent_type: int

	アクセント型（音が下がる場所を指す）

word_type: WordTypes, optional

	PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか

priority: int, optional

	   単語の優先度（0から10までの整数）
	   数字が大きいほど優先度が高くなる
	   1から9までの値を指定することを推奨

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UserDictionaryApiAddUserDictWordUserDictWordPostRequest
*/
func (a *UserDictionaryApiService) AddUserDictWordUserDictWordPost(ctx context.Context) UserDictionaryApiAddUserDictWordUserDictWordPostRequest {
	return UserDictionaryApiAddUserDictWordUserDictWordPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return string
func (a *UserDictionaryApiService) AddUserDictWordUserDictWordPostExecute(r UserDictionaryApiAddUserDictWordUserDictWordPostRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDictionaryApiService.AddUserDictWordUserDictWordPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_dict_word"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.surface == nil {
		return localVarReturnValue, nil, reportError("surface is required and must be specified")
	}
	if r.pronunciation == nil {
		return localVarReturnValue, nil, reportError("pronunciation is required and must be specified")
	}
	if r.accentType == nil {
		return localVarReturnValue, nil, reportError("accentType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "surface", r.surface, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "pronunciation", r.pronunciation, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "accent_type", r.accentType, "")
	if r.wordType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "word_type", r.wordType, "")
	}
	if r.priority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priority", r.priority, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserDictionaryApiDeleteUserDictWordUserDictWordWordUuidDeleteRequest struct {
	ctx        context.Context
	ApiService UserDictionaryApi
	wordUuid   string
}

func (r UserDictionaryApiDeleteUserDictWordUserDictWordWordUuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUserDictWordUserDictWordWordUuidDeleteExecute(r)
}

/*
DeleteUserDictWordUserDictWordWordUuidDelete Delete User Dict Word

ユーザー辞書に登録されている言葉を削除します。

Parameters
----------
word_uuid: str

	   削除する言葉のUUID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param wordUuid
	@return UserDictionaryApiDeleteUserDictWordUserDictWordWordUuidDeleteRequest
*/
func (a *UserDictionaryApiService) DeleteUserDictWordUserDictWordWordUuidDelete(ctx context.Context, wordUuid string) UserDictionaryApiDeleteUserDictWordUserDictWordWordUuidDeleteRequest {
	return UserDictionaryApiDeleteUserDictWordUserDictWordWordUuidDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		wordUuid:   wordUuid,
	}
}

// Execute executes the request
func (a *UserDictionaryApiService) DeleteUserDictWordUserDictWordWordUuidDeleteExecute(r UserDictionaryApiDeleteUserDictWordUserDictWordWordUuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDictionaryApiService.DeleteUserDictWordUserDictWordWordUuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_dict_word/{word_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"word_uuid"+"}", url.PathEscape(parameterValueToString(r.wordUuid, "wordUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type UserDictionaryApiGetUserDictWordsUserDictGetRequest struct {
	ctx        context.Context
	ApiService UserDictionaryApi
}

func (r UserDictionaryApiGetUserDictWordsUserDictGetRequest) Execute() (*map[string]UserDictWord, *http.Response, error) {
	return r.ApiService.GetUserDictWordsUserDictGetExecute(r)
}

/*
GetUserDictWordsUserDictGet Get User Dict Words

ユーザー辞書に登録されている単語の一覧を返します。
単語の表層形(surface)は正規化済みの物を返します。

Returns
-------
Dict[str, UserDictWord]

	   単語のUUIDとその詳細

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UserDictionaryApiGetUserDictWordsUserDictGetRequest
*/
func (a *UserDictionaryApiService) GetUserDictWordsUserDictGet(ctx context.Context) UserDictionaryApiGetUserDictWordsUserDictGetRequest {
	return UserDictionaryApiGetUserDictWordsUserDictGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string]UserDictWord
func (a *UserDictionaryApiService) GetUserDictWordsUserDictGetExecute(r UserDictionaryApiGetUserDictWordsUserDictGetRequest) (*map[string]UserDictWord, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *map[string]UserDictWord
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDictionaryApiService.GetUserDictWordsUserDictGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_dict"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserDictionaryApiImportUserDictWordsImportUserDictPostRequest struct {
	ctx         context.Context
	ApiService  UserDictionaryApi
	override    *bool
	requestBody *map[string]UserDictWord
}

func (r UserDictionaryApiImportUserDictWordsImportUserDictPostRequest) Override(override bool) UserDictionaryApiImportUserDictWordsImportUserDictPostRequest {
	r.override = &override
	return r
}

func (r UserDictionaryApiImportUserDictWordsImportUserDictPostRequest) RequestBody(requestBody map[string]UserDictWord) UserDictionaryApiImportUserDictWordsImportUserDictPostRequest {
	r.requestBody = &requestBody
	return r
}

func (r UserDictionaryApiImportUserDictWordsImportUserDictPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ImportUserDictWordsImportUserDictPostExecute(r)
}

/*
ImportUserDictWordsImportUserDictPost Import User Dict Words

他のユーザー辞書をインポートします。

Parameters
----------
import_dict_data: Dict[str, UserDictWord]

	インポートするユーザー辞書のデータ

override: bool

	   重複したエントリがあった場合、上書きするかどうか

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UserDictionaryApiImportUserDictWordsImportUserDictPostRequest
*/
func (a *UserDictionaryApiService) ImportUserDictWordsImportUserDictPost(ctx context.Context) UserDictionaryApiImportUserDictWordsImportUserDictPostRequest {
	return UserDictionaryApiImportUserDictWordsImportUserDictPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *UserDictionaryApiService) ImportUserDictWordsImportUserDictPostExecute(r UserDictionaryApiImportUserDictWordsImportUserDictPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDictionaryApiService.ImportUserDictWordsImportUserDictPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/import_user_dict"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.override == nil {
		return nil, reportError("override is required and must be specified")
	}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "override", r.override, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest struct {
	ctx           context.Context
	ApiService    UserDictionaryApi
	wordUuid      string
	surface       *string
	pronunciation *string
	accentType    *int32
	wordType      *WordTypes
	priority      *int32
}

func (r UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest) Surface(surface string) UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest {
	r.surface = &surface
	return r
}

func (r UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest) Pronunciation(pronunciation string) UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest {
	r.pronunciation = &pronunciation
	return r
}

func (r UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest) AccentType(accentType int32) UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest {
	r.accentType = &accentType
	return r
}

func (r UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest) WordType(wordType WordTypes) UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest {
	r.wordType = &wordType
	return r
}

func (r UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest) Priority(priority int32) UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest {
	r.priority = &priority
	return r
}

func (r UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.RewriteUserDictWordUserDictWordWordUuidPutExecute(r)
}

/*
RewriteUserDictWordUserDictWordWordUuidPut Rewrite User Dict Word

ユーザー辞書に登録されている言葉を更新します。

Parameters
----------
surface : str

	言葉の表層形

pronunciation: str

	言葉の発音（カタカナ）

accent_type: int

	アクセント型（音が下がる場所を指す）

word_uuid: str

	更新する言葉のUUID

word_type: WordTypes, optional

	PROPER_NOUN（固有名詞）、COMMON_NOUN（普通名詞）、VERB（動詞）、ADJECTIVE（形容詞）、SUFFIX（語尾）のいずれか

priority: int, optional

	   単語の優先度（0から10までの整数）
	   数字が大きいほど優先度が高くなる
	   1から9までの値を指定することを推奨

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param wordUuid
	@return UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest
*/
func (a *UserDictionaryApiService) RewriteUserDictWordUserDictWordWordUuidPut(ctx context.Context, wordUuid string) UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest {
	return UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest{
		ApiService: a,
		ctx:        ctx,
		wordUuid:   wordUuid,
	}
}

// Execute executes the request
func (a *UserDictionaryApiService) RewriteUserDictWordUserDictWordWordUuidPutExecute(r UserDictionaryApiRewriteUserDictWordUserDictWordWordUuidPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDictionaryApiService.RewriteUserDictWordUserDictWordWordUuidPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/user_dict_word/{word_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"word_uuid"+"}", url.PathEscape(parameterValueToString(r.wordUuid, "wordUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.surface == nil {
		return nil, reportError("surface is required and must be specified")
	}
	if r.pronunciation == nil {
		return nil, reportError("pronunciation is required and must be specified")
	}
	if r.accentType == nil {
		return nil, reportError("accentType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "surface", r.surface, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "pronunciation", r.pronunciation, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "accent_type", r.accentType, "")
	if r.wordType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "word_type", r.wordType, "")
	}
	if r.priority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priority", r.priority, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
