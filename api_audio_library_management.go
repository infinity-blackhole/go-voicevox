/*
VOICEVOX Engine

VOICEVOXの音声合成エンジンです。

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voicevox

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type AudioLibraryManagementApi interface {

	/*
			DownloadableLibrariesDownloadableLibrariesGet Downloadable Libraries

			ダウンロード可能な音声ライブラリの情報を返します。

		Returns
		-------
		ret_data: List[DownloadableLibrary]

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return AudioLibraryManagementApiDownloadableLibrariesDownloadableLibrariesGetRequest
	*/
	DownloadableLibrariesDownloadableLibrariesGet(ctx context.Context) AudioLibraryManagementApiDownloadableLibrariesDownloadableLibrariesGetRequest

	// DownloadableLibrariesDownloadableLibrariesGetExecute executes the request
	//  @return []DownloadableLibrary
	DownloadableLibrariesDownloadableLibrariesGetExecute(r AudioLibraryManagementApiDownloadableLibrariesDownloadableLibrariesGetRequest) ([]DownloadableLibrary, *http.Response, error)

	/*
			InstallLibraryInstallLibraryLibraryUuidPost Install Library

			音声ライブラリをインストールします。
		音声ライブラリのZIPファイルをリクエストボディとして送信してください。

		Parameters
		----------
		library_uuid: str
		    音声ライブラリのID

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param libraryUuid
			@return AudioLibraryManagementApiInstallLibraryInstallLibraryLibraryUuidPostRequest
	*/
	InstallLibraryInstallLibraryLibraryUuidPost(ctx context.Context, libraryUuid string) AudioLibraryManagementApiInstallLibraryInstallLibraryLibraryUuidPostRequest

	// InstallLibraryInstallLibraryLibraryUuidPostExecute executes the request
	InstallLibraryInstallLibraryLibraryUuidPostExecute(r AudioLibraryManagementApiInstallLibraryInstallLibraryLibraryUuidPostRequest) (*http.Response, error)

	/*
			InstalledLibrariesInstalledLibrariesGet Installed Libraries

			インストールした音声ライブラリの情報を返します。

		Returns
		-------
		ret_data: List[DownloadableLibrary]

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return AudioLibraryManagementApiInstalledLibrariesInstalledLibrariesGetRequest
	*/
	InstalledLibrariesInstalledLibrariesGet(ctx context.Context) AudioLibraryManagementApiInstalledLibrariesInstalledLibrariesGetRequest

	// InstalledLibrariesInstalledLibrariesGetExecute executes the request
	//  @return []DownloadableLibrary
	InstalledLibrariesInstalledLibrariesGetExecute(r AudioLibraryManagementApiInstalledLibrariesInstalledLibrariesGetRequest) ([]DownloadableLibrary, *http.Response, error)
}

// AudioLibraryManagementApiService AudioLibraryManagementApi service
type AudioLibraryManagementApiService service

type AudioLibraryManagementApiDownloadableLibrariesDownloadableLibrariesGetRequest struct {
	ctx        context.Context
	ApiService AudioLibraryManagementApi
}

func (r AudioLibraryManagementApiDownloadableLibrariesDownloadableLibrariesGetRequest) Execute() ([]DownloadableLibrary, *http.Response, error) {
	return r.ApiService.DownloadableLibrariesDownloadableLibrariesGetExecute(r)
}

/*
DownloadableLibrariesDownloadableLibrariesGet Downloadable Libraries

ダウンロード可能な音声ライブラリの情報を返します。

Returns
-------
ret_data: List[DownloadableLibrary]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AudioLibraryManagementApiDownloadableLibrariesDownloadableLibrariesGetRequest
*/
func (a *AudioLibraryManagementApiService) DownloadableLibrariesDownloadableLibrariesGet(ctx context.Context) AudioLibraryManagementApiDownloadableLibrariesDownloadableLibrariesGetRequest {
	return AudioLibraryManagementApiDownloadableLibrariesDownloadableLibrariesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DownloadableLibrary
func (a *AudioLibraryManagementApiService) DownloadableLibrariesDownloadableLibrariesGetExecute(r AudioLibraryManagementApiDownloadableLibrariesDownloadableLibrariesGetRequest) ([]DownloadableLibrary, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DownloadableLibrary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioLibraryManagementApiService.DownloadableLibrariesDownloadableLibrariesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/downloadable_libraries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AudioLibraryManagementApiInstallLibraryInstallLibraryLibraryUuidPostRequest struct {
	ctx         context.Context
	ApiService  AudioLibraryManagementApi
	libraryUuid string
}

func (r AudioLibraryManagementApiInstallLibraryInstallLibraryLibraryUuidPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.InstallLibraryInstallLibraryLibraryUuidPostExecute(r)
}

/*
InstallLibraryInstallLibraryLibraryUuidPost Install Library

音声ライブラリをインストールします。
音声ライブラリのZIPファイルをリクエストボディとして送信してください。

Parameters
----------
library_uuid: str

	   音声ライブラリのID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param libraryUuid
	@return AudioLibraryManagementApiInstallLibraryInstallLibraryLibraryUuidPostRequest
*/
func (a *AudioLibraryManagementApiService) InstallLibraryInstallLibraryLibraryUuidPost(ctx context.Context, libraryUuid string) AudioLibraryManagementApiInstallLibraryInstallLibraryLibraryUuidPostRequest {
	return AudioLibraryManagementApiInstallLibraryInstallLibraryLibraryUuidPostRequest{
		ApiService:  a,
		ctx:         ctx,
		libraryUuid: libraryUuid,
	}
}

// Execute executes the request
func (a *AudioLibraryManagementApiService) InstallLibraryInstallLibraryLibraryUuidPostExecute(r AudioLibraryManagementApiInstallLibraryInstallLibraryLibraryUuidPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioLibraryManagementApiService.InstallLibraryInstallLibraryLibraryUuidPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/install_library/{library_uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"library_uuid"+"}", url.PathEscape(parameterValueToString(r.libraryUuid, "libraryUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AudioLibraryManagementApiInstalledLibrariesInstalledLibrariesGetRequest struct {
	ctx        context.Context
	ApiService AudioLibraryManagementApi
}

func (r AudioLibraryManagementApiInstalledLibrariesInstalledLibrariesGetRequest) Execute() ([]DownloadableLibrary, *http.Response, error) {
	return r.ApiService.InstalledLibrariesInstalledLibrariesGetExecute(r)
}

/*
InstalledLibrariesInstalledLibrariesGet Installed Libraries

インストールした音声ライブラリの情報を返します。

Returns
-------
ret_data: List[DownloadableLibrary]

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AudioLibraryManagementApiInstalledLibrariesInstalledLibrariesGetRequest
*/
func (a *AudioLibraryManagementApiService) InstalledLibrariesInstalledLibrariesGet(ctx context.Context) AudioLibraryManagementApiInstalledLibrariesInstalledLibrariesGetRequest {
	return AudioLibraryManagementApiInstalledLibrariesInstalledLibrariesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DownloadableLibrary
func (a *AudioLibraryManagementApiService) InstalledLibrariesInstalledLibrariesGetExecute(r AudioLibraryManagementApiInstalledLibrariesInstalledLibrariesGetRequest) ([]DownloadableLibrary, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DownloadableLibrary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioLibraryManagementApiService.InstalledLibrariesInstalledLibrariesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/installed_libraries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
