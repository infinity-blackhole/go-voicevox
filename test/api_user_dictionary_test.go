/*
VOICEVOX Engine

Testing UserDictionaryApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package voicevox

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github/infinity-blackhole/go-voicevox"
	"testing"
)

func Test_voicevox_UserDictionaryApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserDictionaryApiService AddUserDictWordUserDictWordPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserDictionaryApi.AddUserDictWordUserDictWordPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserDictionaryApiService DeleteUserDictWordUserDictWordWordUuidDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var wordUuid string

		httpRes, err := apiClient.UserDictionaryApi.DeleteUserDictWordUserDictWordWordUuidDelete(context.Background(), wordUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserDictionaryApiService GetUserDictWordsUserDictGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserDictionaryApi.GetUserDictWordsUserDictGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserDictionaryApiService ImportUserDictWordsImportUserDictPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.UserDictionaryApi.ImportUserDictWordsImportUserDictPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserDictionaryApiService RewriteUserDictWordUserDictWordWordUuidPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var wordUuid string

		httpRes, err := apiClient.UserDictionaryApi.RewriteUserDictWordUserDictWordWordUuidPut(context.Background(), wordUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
