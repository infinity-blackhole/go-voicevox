/*
VOICEVOX Engine

VOICEVOXの音声合成エンジンです。

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voicevox

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)

type SpeechSynthesisApi interface {

	/*
		CancellableSynthesisCancellableSynthesisPost 音声合成する（キャンセル可能）

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest
	*/
	CancellableSynthesisCancellableSynthesisPost(ctx context.Context) SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest

	// CancellableSynthesisCancellableSynthesisPostExecute executes the request
	//  @return *os.File
	CancellableSynthesisCancellableSynthesisPostExecute(r SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest) (*os.File, *http.Response, error)

	/*
		MorphableTargetsMorphableTargetsPost 指定した話者に対してエンジン内の話者がモーフィングが可能か判定する

		指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します。
	モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。
	プロパティが存在しない場合は、モーフィングが許可されているとみなします。
	返り値の話者はstring型なので注意。

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest
	*/
	MorphableTargetsMorphableTargetsPost(ctx context.Context) SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest

	// MorphableTargetsMorphableTargetsPostExecute executes the request
	//  @return []map[string]MorphableTargetInfo
	MorphableTargetsMorphableTargetsPostExecute(r SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest) ([]map[string]MorphableTargetInfo, *http.Response, error)

	/*
		MultiSynthesisMultiSynthesisPost 複数まとめて音声合成する

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest
	*/
	MultiSynthesisMultiSynthesisPost(ctx context.Context) SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest

	// MultiSynthesisMultiSynthesisPostExecute executes the request
	//  @return *os.File
	MultiSynthesisMultiSynthesisPostExecute(r SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest) (*os.File, *http.Response, error)

	/*
		SynthesisMorphingSynthesisMorphingPost 2人の話者でモーフィングした音声を合成する

		指定された2人の話者で音声を合成、指定した割合でモーフィングした音声を得ます。
	モーフィングの割合は`morph_rate`で指定でき、0.0でベースの話者、1.0でターゲットの話者に近づきます。

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest
	*/
	SynthesisMorphingSynthesisMorphingPost(ctx context.Context) SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest

	// SynthesisMorphingSynthesisMorphingPostExecute executes the request
	//  @return *os.File
	SynthesisMorphingSynthesisMorphingPostExecute(r SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest) (*os.File, *http.Response, error)

	/*
		SynthesisSynthesisPost 音声合成する

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return SpeechSynthesisApiSynthesisSynthesisPostRequest
	*/
	SynthesisSynthesisPost(ctx context.Context) SpeechSynthesisApiSynthesisSynthesisPostRequest

	// SynthesisSynthesisPostExecute executes the request
	//  @return *os.File
	SynthesisSynthesisPostExecute(r SpeechSynthesisApiSynthesisSynthesisPostRequest) (*os.File, *http.Response, error)
}

// SpeechSynthesisApiService SpeechSynthesisApi service
type SpeechSynthesisApiService service

type SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest struct {
	ctx         context.Context
	ApiService  SpeechSynthesisApi
	speaker     *int32
	audioQuery  *AudioQuery
	coreVersion *string
}

func (r SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest) Speaker(speaker int32) SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest {
	r.speaker = &speaker
	return r
}

func (r SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest) AudioQuery(audioQuery AudioQuery) SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest {
	r.audioQuery = &audioQuery
	return r
}

func (r SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest) CoreVersion(coreVersion string) SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest {
	r.coreVersion = &coreVersion
	return r
}

func (r SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.CancellableSynthesisCancellableSynthesisPostExecute(r)
}

/*
CancellableSynthesisCancellableSynthesisPost 音声合成する（キャンセル可能）

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest
*/
func (a *SpeechSynthesisApiService) CancellableSynthesisCancellableSynthesisPost(ctx context.Context) SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest {
	return SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *SpeechSynthesisApiService) CancellableSynthesisCancellableSynthesisPostExecute(r SpeechSynthesisApiCancellableSynthesisCancellableSynthesisPostRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpeechSynthesisApiService.CancellableSynthesisCancellableSynthesisPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cancellable_synthesis"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.speaker == nil {
		return localVarReturnValue, nil, reportError("speaker is required and must be specified")
	}
	if r.audioQuery == nil {
		return localVarReturnValue, nil, reportError("audioQuery is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "speaker", r.speaker, "")
	if r.coreVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "core_version", r.coreVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"audio/wav", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.audioQuery
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest struct {
	ctx         context.Context
	ApiService  SpeechSynthesisApi
	requestBody *[]int32
	coreVersion *string
}

func (r SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest) RequestBody(requestBody []int32) SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest {
	r.requestBody = &requestBody
	return r
}

func (r SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest) CoreVersion(coreVersion string) SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest {
	r.coreVersion = &coreVersion
	return r
}

func (r SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest) Execute() ([]map[string]MorphableTargetInfo, *http.Response, error) {
	return r.ApiService.MorphableTargetsMorphableTargetsPostExecute(r)
}

/*
MorphableTargetsMorphableTargetsPost 指定した話者に対してエンジン内の話者がモーフィングが可能か判定する

指定されたベース話者に対してエンジン内の各話者がモーフィング機能を利用可能か返します。
モーフィングの許可/禁止は`/speakers`の`speaker.supported_features.synthesis_morphing`に記載されています。
プロパティが存在しない場合は、モーフィングが許可されているとみなします。
返り値の話者はstring型なので注意。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest
*/
func (a *SpeechSynthesisApiService) MorphableTargetsMorphableTargetsPost(ctx context.Context) SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest {
	return SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []map[string]MorphableTargetInfo
func (a *SpeechSynthesisApiService) MorphableTargetsMorphableTargetsPostExecute(r SpeechSynthesisApiMorphableTargetsMorphableTargetsPostRequest) ([]map[string]MorphableTargetInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []map[string]MorphableTargetInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpeechSynthesisApiService.MorphableTargetsMorphableTargetsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/morphable_targets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	if r.coreVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "core_version", r.coreVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest struct {
	ctx         context.Context
	ApiService  SpeechSynthesisApi
	speaker     *int32
	audioQuery  *[]AudioQuery
	coreVersion *string
}

func (r SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest) Speaker(speaker int32) SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest {
	r.speaker = &speaker
	return r
}

func (r SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest) AudioQuery(audioQuery []AudioQuery) SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest {
	r.audioQuery = &audioQuery
	return r
}

func (r SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest) CoreVersion(coreVersion string) SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest {
	r.coreVersion = &coreVersion
	return r
}

func (r SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.MultiSynthesisMultiSynthesisPostExecute(r)
}

/*
MultiSynthesisMultiSynthesisPost 複数まとめて音声合成する

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest
*/
func (a *SpeechSynthesisApiService) MultiSynthesisMultiSynthesisPost(ctx context.Context) SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest {
	return SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *SpeechSynthesisApiService) MultiSynthesisMultiSynthesisPostExecute(r SpeechSynthesisApiMultiSynthesisMultiSynthesisPostRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpeechSynthesisApiService.MultiSynthesisMultiSynthesisPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/multi_synthesis"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.speaker == nil {
		return localVarReturnValue, nil, reportError("speaker is required and must be specified")
	}
	if r.audioQuery == nil {
		return localVarReturnValue, nil, reportError("audioQuery is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "speaker", r.speaker, "")
	if r.coreVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "core_version", r.coreVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/zip", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.audioQuery
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest struct {
	ctx           context.Context
	ApiService    SpeechSynthesisApi
	baseSpeaker   *int32
	targetSpeaker *int32
	morphRate     *float32
	audioQuery    *AudioQuery
	coreVersion   *string
}

func (r SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest) BaseSpeaker(baseSpeaker int32) SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest {
	r.baseSpeaker = &baseSpeaker
	return r
}

func (r SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest) TargetSpeaker(targetSpeaker int32) SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest {
	r.targetSpeaker = &targetSpeaker
	return r
}

func (r SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest) MorphRate(morphRate float32) SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest {
	r.morphRate = &morphRate
	return r
}

func (r SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest) AudioQuery(audioQuery AudioQuery) SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest {
	r.audioQuery = &audioQuery
	return r
}

func (r SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest) CoreVersion(coreVersion string) SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest {
	r.coreVersion = &coreVersion
	return r
}

func (r SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.SynthesisMorphingSynthesisMorphingPostExecute(r)
}

/*
SynthesisMorphingSynthesisMorphingPost 2人の話者でモーフィングした音声を合成する

指定された2人の話者で音声を合成、指定した割合でモーフィングした音声を得ます。
モーフィングの割合は`morph_rate`で指定でき、0.0でベースの話者、1.0でターゲットの話者に近づきます。

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest
*/
func (a *SpeechSynthesisApiService) SynthesisMorphingSynthesisMorphingPost(ctx context.Context) SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest {
	return SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *SpeechSynthesisApiService) SynthesisMorphingSynthesisMorphingPostExecute(r SpeechSynthesisApiSynthesisMorphingSynthesisMorphingPostRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpeechSynthesisApiService.SynthesisMorphingSynthesisMorphingPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/synthesis_morphing"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.baseSpeaker == nil {
		return localVarReturnValue, nil, reportError("baseSpeaker is required and must be specified")
	}
	if r.targetSpeaker == nil {
		return localVarReturnValue, nil, reportError("targetSpeaker is required and must be specified")
	}
	if r.morphRate == nil {
		return localVarReturnValue, nil, reportError("morphRate is required and must be specified")
	}
	if *r.morphRate < 0 {
		return localVarReturnValue, nil, reportError("morphRate must be greater than 0")
	}
	if *r.morphRate > 1 {
		return localVarReturnValue, nil, reportError("morphRate must be less than 1")
	}
	if r.audioQuery == nil {
		return localVarReturnValue, nil, reportError("audioQuery is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "base_speaker", r.baseSpeaker, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "target_speaker", r.targetSpeaker, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "morph_rate", r.morphRate, "")
	if r.coreVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "core_version", r.coreVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"audio/wav", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.audioQuery
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SpeechSynthesisApiSynthesisSynthesisPostRequest struct {
	ctx                        context.Context
	ApiService                 SpeechSynthesisApi
	speaker                    *int32
	audioQuery                 *AudioQuery
	enableInterrogativeUpspeak *bool
	coreVersion                *string
}

func (r SpeechSynthesisApiSynthesisSynthesisPostRequest) Speaker(speaker int32) SpeechSynthesisApiSynthesisSynthesisPostRequest {
	r.speaker = &speaker
	return r
}

func (r SpeechSynthesisApiSynthesisSynthesisPostRequest) AudioQuery(audioQuery AudioQuery) SpeechSynthesisApiSynthesisSynthesisPostRequest {
	r.audioQuery = &audioQuery
	return r
}

// 疑問系のテキストが与えられたら語尾を自動調整する
func (r SpeechSynthesisApiSynthesisSynthesisPostRequest) EnableInterrogativeUpspeak(enableInterrogativeUpspeak bool) SpeechSynthesisApiSynthesisSynthesisPostRequest {
	r.enableInterrogativeUpspeak = &enableInterrogativeUpspeak
	return r
}

func (r SpeechSynthesisApiSynthesisSynthesisPostRequest) CoreVersion(coreVersion string) SpeechSynthesisApiSynthesisSynthesisPostRequest {
	r.coreVersion = &coreVersion
	return r
}

func (r SpeechSynthesisApiSynthesisSynthesisPostRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.SynthesisSynthesisPostExecute(r)
}

/*
SynthesisSynthesisPost 音声合成する

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return SpeechSynthesisApiSynthesisSynthesisPostRequest
*/
func (a *SpeechSynthesisApiService) SynthesisSynthesisPost(ctx context.Context) SpeechSynthesisApiSynthesisSynthesisPostRequest {
	return SpeechSynthesisApiSynthesisSynthesisPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *SpeechSynthesisApiService) SynthesisSynthesisPostExecute(r SpeechSynthesisApiSynthesisSynthesisPostRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SpeechSynthesisApiService.SynthesisSynthesisPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/synthesis"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.speaker == nil {
		return localVarReturnValue, nil, reportError("speaker is required and must be specified")
	}
	if r.audioQuery == nil {
		return localVarReturnValue, nil, reportError("audioQuery is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "speaker", r.speaker, "")
	if r.enableInterrogativeUpspeak != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enable_interrogative_upspeak", r.enableInterrogativeUpspeak, "")
	}
	if r.coreVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "core_version", r.coreVersion, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"audio/wav", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.audioQuery
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
