/*
VOICEVOX Engine

VOICEVOXの音声合成エンジンです。

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voicevox

import (
	"encoding/json"
)

// checks if the Speaker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Speaker{}

// Speaker スピーカー情報
type Speaker struct {
	SupportedFeatures *SpeakerSupportedFeatures `json:"supported_features,omitempty"`
	Name              string                    `json:"name"`
	SpeakerUuid       string                    `json:"speaker_uuid"`
	Styles            []SpeakerStyle            `json:"styles"`
	Version           *string                   `json:"version,omitempty"`
}

// NewSpeaker instantiates a new Speaker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpeaker(name string, speakerUuid string, styles []SpeakerStyle) *Speaker {
	this := Speaker{}
	this.Name = name
	this.SpeakerUuid = speakerUuid
	this.Styles = styles
	var version string = "スピーカーのバージョン"
	this.Version = &version
	return &this
}

// NewSpeakerWithDefaults instantiates a new Speaker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpeakerWithDefaults() *Speaker {
	this := Speaker{}
	var version string = "スピーカーのバージョン"
	this.Version = &version
	return &this
}

// GetSupportedFeatures returns the SupportedFeatures field value if set, zero value otherwise.
func (o *Speaker) GetSupportedFeatures() SpeakerSupportedFeatures {
	if o == nil || IsNil(o.SupportedFeatures) {
		var ret SpeakerSupportedFeatures
		return ret
	}
	return *o.SupportedFeatures
}

// GetSupportedFeaturesOk returns a tuple with the SupportedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Speaker) GetSupportedFeaturesOk() (*SpeakerSupportedFeatures, bool) {
	if o == nil || IsNil(o.SupportedFeatures) {
		return nil, false
	}
	return o.SupportedFeatures, true
}

// HasSupportedFeatures returns a boolean if a field has been set.
func (o *Speaker) HasSupportedFeatures() bool {
	if o != nil && !IsNil(o.SupportedFeatures) {
		return true
	}

	return false
}

// SetSupportedFeatures gets a reference to the given SpeakerSupportedFeatures and assigns it to the SupportedFeatures field.
func (o *Speaker) SetSupportedFeatures(v SpeakerSupportedFeatures) {
	o.SupportedFeatures = &v
}

// GetName returns the Name field value
func (o *Speaker) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Speaker) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Speaker) SetName(v string) {
	o.Name = v
}

// GetSpeakerUuid returns the SpeakerUuid field value
func (o *Speaker) GetSpeakerUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpeakerUuid
}

// GetSpeakerUuidOk returns a tuple with the SpeakerUuid field value
// and a boolean to check if the value has been set.
func (o *Speaker) GetSpeakerUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpeakerUuid, true
}

// SetSpeakerUuid sets field value
func (o *Speaker) SetSpeakerUuid(v string) {
	o.SpeakerUuid = v
}

// GetStyles returns the Styles field value
func (o *Speaker) GetStyles() []SpeakerStyle {
	if o == nil {
		var ret []SpeakerStyle
		return ret
	}

	return o.Styles
}

// GetStylesOk returns a tuple with the Styles field value
// and a boolean to check if the value has been set.
func (o *Speaker) GetStylesOk() ([]SpeakerStyle, bool) {
	if o == nil {
		return nil, false
	}
	return o.Styles, true
}

// SetStyles sets field value
func (o *Speaker) SetStyles(v []SpeakerStyle) {
	o.Styles = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Speaker) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Speaker) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Speaker) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Speaker) SetVersion(v string) {
	o.Version = &v
}

func (o Speaker) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Speaker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SupportedFeatures) {
		toSerialize["supported_features"] = o.SupportedFeatures
	}
	toSerialize["name"] = o.Name
	toSerialize["speaker_uuid"] = o.SpeakerUuid
	toSerialize["styles"] = o.Styles
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableSpeaker struct {
	value *Speaker
	isSet bool
}

func (v NullableSpeaker) Get() *Speaker {
	return v.value
}

func (v *NullableSpeaker) Set(val *Speaker) {
	v.value = val
	v.isSet = true
}

func (v NullableSpeaker) IsSet() bool {
	return v.isSet
}

func (v *NullableSpeaker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpeaker(val *Speaker) *NullableSpeaker {
	return &NullableSpeaker{value: val, isSet: true}
}

func (v NullableSpeaker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpeaker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
