/*
VOICEVOX Engine

VOICEVOXの音声合成エンジンです。

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voicevox

import (
	"encoding/json"
)

// checks if the StyleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StyleInfo{}

// StyleInfo スタイルの追加情報
type StyleInfo struct {
	Id           int32    `json:"id"`
	Icon         string   `json:"icon"`
	Portrait     *string  `json:"portrait,omitempty"`
	VoiceSamples []string `json:"voice_samples"`
}

// NewStyleInfo instantiates a new StyleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStyleInfo(id int32, icon string, voiceSamples []string) *StyleInfo {
	this := StyleInfo{}
	this.Id = id
	this.Icon = icon
	this.VoiceSamples = voiceSamples
	return &this
}

// NewStyleInfoWithDefaults instantiates a new StyleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStyleInfoWithDefaults() *StyleInfo {
	this := StyleInfo{}
	return &this
}

// GetId returns the Id field value
func (o *StyleInfo) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StyleInfo) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StyleInfo) SetId(v int32) {
	o.Id = v
}

// GetIcon returns the Icon field value
func (o *StyleInfo) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *StyleInfo) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *StyleInfo) SetIcon(v string) {
	o.Icon = v
}

// GetPortrait returns the Portrait field value if set, zero value otherwise.
func (o *StyleInfo) GetPortrait() string {
	if o == nil || IsNil(o.Portrait) {
		var ret string
		return ret
	}
	return *o.Portrait
}

// GetPortraitOk returns a tuple with the Portrait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StyleInfo) GetPortraitOk() (*string, bool) {
	if o == nil || IsNil(o.Portrait) {
		return nil, false
	}
	return o.Portrait, true
}

// HasPortrait returns a boolean if a field has been set.
func (o *StyleInfo) HasPortrait() bool {
	if o != nil && !IsNil(o.Portrait) {
		return true
	}

	return false
}

// SetPortrait gets a reference to the given string and assigns it to the Portrait field.
func (o *StyleInfo) SetPortrait(v string) {
	o.Portrait = &v
}

// GetVoiceSamples returns the VoiceSamples field value
func (o *StyleInfo) GetVoiceSamples() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.VoiceSamples
}

// GetVoiceSamplesOk returns a tuple with the VoiceSamples field value
// and a boolean to check if the value has been set.
func (o *StyleInfo) GetVoiceSamplesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VoiceSamples, true
}

// SetVoiceSamples sets field value
func (o *StyleInfo) SetVoiceSamples(v []string) {
	o.VoiceSamples = v
}

func (o StyleInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StyleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["icon"] = o.Icon
	if !IsNil(o.Portrait) {
		toSerialize["portrait"] = o.Portrait
	}
	toSerialize["voice_samples"] = o.VoiceSamples
	return toSerialize, nil
}

type NullableStyleInfo struct {
	value *StyleInfo
	isSet bool
}

func (v NullableStyleInfo) Get() *StyleInfo {
	return v.value
}

func (v *NullableStyleInfo) Set(val *StyleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStyleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStyleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStyleInfo(val *StyleInfo) *NullableStyleInfo {
	return &NullableStyleInfo{value: val, isSet: true}
}

func (v NullableStyleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStyleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
