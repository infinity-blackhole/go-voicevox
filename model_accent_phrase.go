/*
VOICEVOX Engine

VOICEVOXの音声合成エンジンです。

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package voicevox

import (
	"encoding/json"
)

// checks if the AccentPhrase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccentPhrase{}

// AccentPhrase アクセント句ごとの情報
type AccentPhrase struct {
	Moras           []Mora                 `json:"moras"`
	Accent          int32                  `json:"accent"`
	PauseMora       *AccentPhrasePauseMora `json:"pause_mora,omitempty"`
	IsInterrogative *bool                  `json:"is_interrogative,omitempty"`
}

// NewAccentPhrase instantiates a new AccentPhrase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccentPhrase(moras []Mora, accent int32) *AccentPhrase {
	this := AccentPhrase{}
	this.Moras = moras
	this.Accent = accent
	var isInterrogative bool = false
	this.IsInterrogative = &isInterrogative
	return &this
}

// NewAccentPhraseWithDefaults instantiates a new AccentPhrase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccentPhraseWithDefaults() *AccentPhrase {
	this := AccentPhrase{}
	var isInterrogative bool = false
	this.IsInterrogative = &isInterrogative
	return &this
}

// GetMoras returns the Moras field value
func (o *AccentPhrase) GetMoras() []Mora {
	if o == nil {
		var ret []Mora
		return ret
	}

	return o.Moras
}

// GetMorasOk returns a tuple with the Moras field value
// and a boolean to check if the value has been set.
func (o *AccentPhrase) GetMorasOk() ([]Mora, bool) {
	if o == nil {
		return nil, false
	}
	return o.Moras, true
}

// SetMoras sets field value
func (o *AccentPhrase) SetMoras(v []Mora) {
	o.Moras = v
}

// GetAccent returns the Accent field value
func (o *AccentPhrase) GetAccent() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Accent
}

// GetAccentOk returns a tuple with the Accent field value
// and a boolean to check if the value has been set.
func (o *AccentPhrase) GetAccentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Accent, true
}

// SetAccent sets field value
func (o *AccentPhrase) SetAccent(v int32) {
	o.Accent = v
}

// GetPauseMora returns the PauseMora field value if set, zero value otherwise.
func (o *AccentPhrase) GetPauseMora() AccentPhrasePauseMora {
	if o == nil || IsNil(o.PauseMora) {
		var ret AccentPhrasePauseMora
		return ret
	}
	return *o.PauseMora
}

// GetPauseMoraOk returns a tuple with the PauseMora field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccentPhrase) GetPauseMoraOk() (*AccentPhrasePauseMora, bool) {
	if o == nil || IsNil(o.PauseMora) {
		return nil, false
	}
	return o.PauseMora, true
}

// HasPauseMora returns a boolean if a field has been set.
func (o *AccentPhrase) HasPauseMora() bool {
	if o != nil && !IsNil(o.PauseMora) {
		return true
	}

	return false
}

// SetPauseMora gets a reference to the given AccentPhrasePauseMora and assigns it to the PauseMora field.
func (o *AccentPhrase) SetPauseMora(v AccentPhrasePauseMora) {
	o.PauseMora = &v
}

// GetIsInterrogative returns the IsInterrogative field value if set, zero value otherwise.
func (o *AccentPhrase) GetIsInterrogative() bool {
	if o == nil || IsNil(o.IsInterrogative) {
		var ret bool
		return ret
	}
	return *o.IsInterrogative
}

// GetIsInterrogativeOk returns a tuple with the IsInterrogative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccentPhrase) GetIsInterrogativeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsInterrogative) {
		return nil, false
	}
	return o.IsInterrogative, true
}

// HasIsInterrogative returns a boolean if a field has been set.
func (o *AccentPhrase) HasIsInterrogative() bool {
	if o != nil && !IsNil(o.IsInterrogative) {
		return true
	}

	return false
}

// SetIsInterrogative gets a reference to the given bool and assigns it to the IsInterrogative field.
func (o *AccentPhrase) SetIsInterrogative(v bool) {
	o.IsInterrogative = &v
}

func (o AccentPhrase) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccentPhrase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["moras"] = o.Moras
	toSerialize["accent"] = o.Accent
	if !IsNil(o.PauseMora) {
		toSerialize["pause_mora"] = o.PauseMora
	}
	if !IsNil(o.IsInterrogative) {
		toSerialize["is_interrogative"] = o.IsInterrogative
	}
	return toSerialize, nil
}

type NullableAccentPhrase struct {
	value *AccentPhrase
	isSet bool
}

func (v NullableAccentPhrase) Get() *AccentPhrase {
	return v.value
}

func (v *NullableAccentPhrase) Set(val *AccentPhrase) {
	v.value = val
	v.isSet = true
}

func (v NullableAccentPhrase) IsSet() bool {
	return v.isSet
}

func (v *NullableAccentPhrase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccentPhrase(val *AccentPhrase) *NullableAccentPhrase {
	return &NullableAccentPhrase{value: val, isSet: true}
}

func (v NullableAccentPhrase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccentPhrase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
